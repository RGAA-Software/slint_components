import { VerticalBox } from "std-widgets.slint";
import { Theme } from "ui_theme.slint";
import { VSpace, HSpace } from "ui_space.slint";

export component SideBarItem inherits Rectangle {

    in property <string> itemtext: "Default";
    in property <brush> active-bg-color: Theme.palette.main-color;
    in property <brush> inavtive-bg-color: Theme.palette.pure-white;
    in property <bool> selected: false;
    in property <image> icon <=> prefix-icon.source;
    in property <brush> normal-color: Theme.palette.font-color-main;
    in property <length> icon-padding-left: 8px;
    in property <length> icon-size: 18px;
    in property <length> text-padding-left: 5px;

    callback clicked(string);

    width: 150px;
    height: 35px;
    border-radius: 8px;
    background: ta.pressed || selected ? active-bg-color :ta.has-hover? active-bg-color.darker(15%) : inavtive-bg-color;

    animate background {
        duration: 300ms;
    }

    HorizontalLayout {
        alignment: start;

        HSpace {size: icon-padding-left;}

        VerticalLayout {
            alignment: center;
            prefix-icon := Image {
                width: icon-size;
                height: icon-size;
                colorize: selected || ta.has-hover ? Theme.palette.pure-white : normal-color;
            }
        }

        HSpace {size: text-padding-left;}

        Text {
            text: itemtext;
            font-size: 16px;
            color: selected || ta.has-hover || ta.pressed ? #ffffff : normal-color;
            vertical-alignment: center;
        }
    }
    ta := TouchArea {
        width: 100%;
        height: 100%;

        clicked => {
            root.clicked(itemtext);
        }
    }
}

export struct ItemInfo {
    title: string,
    icon: image,
}

export component SideBar inherits VerticalLayout {

    in property <[ItemInfo]> item-names;
    in-out property <int> selected_index;
    in-out property <string> name;
    in property <length> item-space: 10px;
    in property <brush> font-normal-color: Theme.palette.font-color-main;
    in property <length> icon-padding-left: 8px;
    in property <length> icon-size: 18px;
    in property <length> text-padding-left: 5px;

    for item[index] in item-names : VerticalLayout {
        HorizontalLayout {
            alignment: center;
            SideBarItem {
                itemtext: item.title;
                selected: selected_index == index;
                icon: item.icon;
                normal-color: font-normal-color;
                icon-padding-left: root.icon-padding-left;
                icon-size: root.icon-size;
                text-padding-left: root.text-padding-left;
                clicked(name) => {
                    root.name = name;
                    root.selected_index = index;
                    debug("index : ", index);
                }
            }
        }
        VSpace {height: item-space;}
    }
}